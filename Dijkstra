#include<iostream>
#include<vector>
#include<cstring>
#include<functional>
#include<queue>
#include<algorithm>
using namespace std;
int m, n;
vector<pair<int, int> >adj_list[100005];
vector<int> dijkstra(int node = 0)
{
	vector<int>sp(n, -1);
	vector<int> nodes(n+1);
	priority_queue < pair<int, int>, vector < pair<int, int> >, greater<pair<int, int> > > q;
	q.push(make_pair(0, node));
	while (!q.empty())
	{
		int parent = q.top().second;
		int cost = q.top().first;
		q.pop();
		if (sp[parent] != -1)
			continue;
		sp[parent] = cost;
		nodes.push_back(parent+1);
		for (int i = 0; i < adj_list[parent].size(); i++)
		{
			int child = adj_list[parent][i].second;
			if (sp[child] == -1)
			{
				q.push(make_pair(adj_list[parent][i].first+cost, child));
				nodes[child+1] = parent+1;
			}
		}
	}
	cout << sp[n - 1] << endl;
	return nodes;
}
int main()
{
	cin >> n >> m;
	for (int i = 0; i < m; i++)
	{
		int x, y, w;
		cin >> x >> y >> w;
		adj_list[x - 1].push_back(pair<int, int>(w,y - 1));
		adj_list[y - 1].push_back(pair<int, int>(w,x - 1));
	}
	vector<int>nodes = dijkstra();
	int x = n;
	do {
		cout << x << " ";
		x= nodes[x];
	} while (x != 1);
	cout << x;
	return 0;

}

